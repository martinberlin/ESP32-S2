ESP32S2:
Works stable.
As expected I can see a the received UDP packages in the Serial output. Using this Android app to send fast frames from a video:
http://udpx.fasani.de
I'm sending packages of different bytes length of data using udpx app and sending it using Javascript / UDP in a Cordova App.
When I add a variable range is because the the app is compressing a snapshot of the video image being played (50*20 1000 RGB 565 pixels), 
hence depending on the actual image, can be more or less compressed.

S2 vs ESP32 in receive speed
This tests where run with exactly the same Firmware and same settings (outputUdpPacketsInSerial = false so just prints U+first Byte in HEX)

1. Between 200 and 300 bytes Zlib packet received:
Testing receiving this fluctuanting size of data sent by Android I got 12 Frames per second avg in both Chips. 
I've expected a bit lower framerate in S2 since it has only one Core but for that let's do something more procesor intensive like receive and decompress (Coming in next tests)

2. 606 bytes packages
S2: AVG framerate 18 packets per second (FPS)
ESP32: AVG framerate 25 FPS

3. 306 bytes 
S2: AVG framerate 18 FPS
ESP32: AVG framerate 25 FPS

4. 66 bytes
S2: AVG framerate 21 FPS
ESP32: AVG framerate 28 FPS

CONCLUSION:
2 Cores ESP32 beats S2 receiving packages at fast speed per UDP.

Consumption of this test on S2*
100 mA/h Almost constant 100 milliamps per hour, no matter if receiving or not.


Consumption on ESP32
About 85 to 90 mA/h. When receiving from 120 and spikes up to 150 mA/h 

Receiving consumes between 40 to 50% more than with S2 one LX7 core.

*NOTE: measured with 5V USB so is passing through the voltage regulator